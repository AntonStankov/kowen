# Generated by Django 4.1.7 on 2023-02-25 13:55

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('Accounts', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Adminship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='GroupPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
                ('description', models.TextField(blank=True, max_length=500)),
                ('group_permission_picture', models.ImageField(blank=True, upload_to='group_permission_pictures/')),
                ('group_permission_color', models.CharField(blank=True, max_length=30)),
                ('group_permission_icon', models.CharField(blank=True, max_length=30)),
                ('group_permission', models.CharField(blank=True, choices=[('can_view', 'can_view'), ('can_edit', 'can_edit'), ('can_delete', 'can_delete'), ('can_create', 'can_create'), ('can_share', 'can_share'), ('can_download', 'can_download'), ('can_upload', 'can_upload')], max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='GroupPermissionRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='GroupPermissionUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='GroupRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_admin', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='UserGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
                ('description', models.TextField(blank=True, max_length=500)),
                ('group_picture', models.ImageField(blank=True, upload_to='group_pictures/')),
                ('group_color', models.CharField(blank=True, max_length=30)),
                ('group_icon', models.CharField(blank=True, max_length=30)),
            ],
        ),
        migrations.RenameField(
            model_name='user',
            old_name='user_color',
            new_name='location',
        ),
        migrations.RemoveField(
            model_name='user',
            name='user_group',
        ),
        migrations.RemoveField(
            model_name='user',
            name='user_icon',
        ),
        migrations.RemoveField(
            model_name='user',
            name='user_picture',
        ),
        migrations.RemoveField(
            model_name='user',
            name='user_role',
        ),
        migrations.AddField(
            model_name='user',
            name='bio',
            field=models.TextField(blank=True, max_length=500),
        ),
        migrations.AddField(
            model_name='user',
            name='birth_date',
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='user',
            name='profile_picture',
            field=models.ImageField(blank=True, upload_to='profile_pictures/'),
        ),
        migrations.AddField(
            model_name='user',
            name='role',
            field=models.ForeignKey(default='USER', on_delete=django.db.models.deletion.CASCADE, to='Accounts.role'),
        ),
        migrations.AlterField(
            model_name='user',
            name='is_staff',
            field=models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status'),
        ),
        migrations.AlterField(
            model_name='user',
            name='is_superuser',
            field=models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status'),
        ),
        migrations.RemoveField(
            model_name='user',
            name='user_permissions',
        ),
        migrations.AlterField(
            model_name='user',
            name='username',
            field=models.CharField(max_length=30, unique=True),
        ),
        migrations.DeleteModel(
            name='Group',
        ),
        migrations.AddField(
            model_name='usergroup',
            name='group_admins',
            field=models.ManyToManyField(through='Accounts.Adminship', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='usergroup',
            name='group_members',
            field=models.ManyToManyField(through='Accounts.Membership', to='Accounts.usergroup'),
        ),
        migrations.AddField(
            model_name='usergroup',
            name='group_owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_owner', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='usergroup',
            name='group_permissions',
            field=models.ManyToManyField(through='Accounts.GroupPermissionRole', to='Accounts.grouppermission'),
        ),
        migrations.AddField(
            model_name='usergroup',
            name='group_roles',
            field=models.ManyToManyField(through='Accounts.GroupRole', to='Accounts.role'),
        ),
        migrations.AddField(
            model_name='membership',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Accounts.usergroup'),
        ),
        migrations.AddField(
            model_name='membership',
            name='invited_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invited_by', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='membership',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='grouprole',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Accounts.usergroup'),
        ),
        migrations.AddField(
            model_name='grouprole',
            name='role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Accounts.role'),
        ),
        migrations.AddField(
            model_name='grouppermissionuser',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Accounts.usergroup'),
        ),
        migrations.AddField(
            model_name='grouppermissionuser',
            name='group_permission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Accounts.grouppermission'),
        ),
        migrations.AddField(
            model_name='grouppermissionuser',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='grouppermissionrole',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Accounts.usergroup'),
        ),
        migrations.AddField(
            model_name='grouppermissionrole',
            name='group_permission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Accounts.grouppermission'),
        ),
        migrations.AddField(
            model_name='grouppermissionrole',
            name='role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Accounts.role'),
        ),
        migrations.AddField(
            model_name='adminship',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Accounts.usergroup'),
        ),
        migrations.AddField(
            model_name='adminship',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
